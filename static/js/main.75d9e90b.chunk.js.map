{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","global","colors","brand","font","family","size","height","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","App","useState","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","fill","Heading","level","margin","Button","icon","Notification","onClick","flex","overflow","horizontal","Layer","FormClose","Collapsible","open","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAGMA,EAAQ,CACZC,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UAKRC,EAAS,SAACC,GAAD,OACb,kBAACC,EAAA,EAAD,eACEC,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,QACXC,IAAK,CAAEC,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVC,MAAO,CAAEC,OAAQ,MACbb,KAmEOc,MA/Df,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,kBAACC,EAAA,EAAD,CAAS3B,MAAOA,EAAO4B,MAAI,GAC3B,kBAACC,EAAA,EAAkBC,SAAnB,MACC,SAAAxB,GAAI,OACH,kBAACI,EAAA,EAAD,CAAKqB,MAAI,GACP,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QAA1B,UACA,kBAACC,EAAA,EAAD,CACEC,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAS,kBAAMZ,GAAgBD,OAGnC,kBAACf,EAAA,EAAD,CAAKE,UAAU,MAAM2B,MAAI,EAACC,SAAU,CAAEC,WAAY,WAChD,kBAAC/B,EAAA,EAAD,CAAK6B,MAAI,EAAC1B,MAAM,SAASC,QAAQ,UAAjC,YAGGW,GAAwB,UAATnB,EAchB,kBAACoC,EAAA,EAAD,KACE,kBAAChC,EAAA,EAAD,CACAK,WAAW,UACXJ,IAAI,SACJG,QAAQ,MACRD,MAAM,SACND,UAAU,OAEV,kBAACuB,EAAA,EAAD,CACEC,KAAM,kBAACO,EAAA,EAAD,MACNL,QAAS,kBAAMZ,GAAe,OAGhC,kBAAChB,EAAA,EAAD,CACEqB,MAAI,EACJhB,WAAW,UACXF,MAAM,SACNC,QAAQ,UAJV,YA1BF,kBAAC8B,EAAA,EAAD,CAAahC,UAAU,aAAaiC,KAAMpB,GAC1C,kBAACf,EAAA,EAAD,CACE6B,MAAI,EACJO,MAAM,SACN/B,WAAW,UACXK,UAAU,QACVP,MAAM,SACNC,QAAQ,UANV,mBCtCQiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75d9e90b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Button, Collapsible, Heading, Grommet, ResponsiveContext, Layer, } from 'grommet';\nimport { FormClose, Notification } from 'grommet-icons';\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Roboto',\n      size: '14px',\n      height: '20px',\n    },\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  return (\n    <Grommet theme={theme} full>\n    <ResponsiveContext.Consumer>\n    {size => (\n      <Box fill>\n        <AppBar>\n          <Heading level='3' margin='none'>My App</Heading>\n          <Button\n            icon={<Notification />}\n            onClick={() => setShowSidebar(!showSidebar)}\n          />\n        </AppBar>\n        <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n          <Box flex align='center' justify='center'>\n            app body\n          </Box>\n          {(!showSidebar || size !== 'small') ? (\n            <Collapsible direction=\"horizontal\" open={showSidebar}>\n            <Box\n              flex\n              width='medium'\n              background='light-2'\n              elevation='small'\n              align='center'\n              justify='center'\n            >\n              sidebar\n            </Box>\n          </Collapsible>\n          ): (\n            <Layer>\n              <Box\n              background='light-2'\n              tag='header'\n              justify='end'\n              align='center'\n              direction='row'\n            >\n              <Button\n                icon={<FormClose />}\n                onClick={() => setShowSidebar(false)}\n              />\n              </Box>\n              <Box\n                fill\n                background='light-2'\n                align='center'\n                justify='center'\n              >\n                sidebar\n              </Box>\n            </Layer>\n          )}\n        </Box>\n      </Box>\n      )}\n    </ResponsiveContext.Consumer>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}