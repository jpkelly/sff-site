{"version":3,"sources":["sfflogo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","global","colors","brand","border","red","font","family","height","button","width","radius","padding","vertical","horizontal","extend","props","primary","secondary","box","AppBar","Box","tag","direction","align","justify","background","pad","left","right","elevation","style","zIndex","App","useState","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","size","fill","Heading","level","margin","Button","icon","Menu","onClick","flex","overflow","color","min","max","src","logo","className","alt","Paragraph","variant","label","alignSelf","Footer","Text","Anchor","Layer","FormClose","Collapsible","open","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1e2fd8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sfflogo.e2d6f06e.svg\";","import React, { useState } from \"react\";\nimport { Box, Button, Collapsible, Heading, Grommet, ResponsiveContext, Layer, Paragraph, Footer, Text, Anchor, Grid } from 'grommet';\nimport { normalizeColor } from 'grommet/utils';\nimport { rgba } from 'polished';\nimport { FormClose, Menu } from 'grommet-icons';\nimport './App.css';\nimport logo from './sfflogo.svg';\nconst theme = {\n  global: {\n    colors: {\n      brand: '#000000',\n      border: '#ff00ff',\n      red: '#ff0000',\n    },\n    font: {\n      family: 'din-2014',\n      height: '20px',\n    },\n  },\n  button: {\n    border: {\n      width: '2px',\n      radius: '30px',\n    },\n    padding: {\n      vertical: '10px',\n      horizontal: '40px',\n    },\n    extend: props => `\n      font-size: 1.075rem;\n      font-weight: 500;\n      line-height: normal;\n\n     ${!props.primary && `\n       border-color: rgb(255, 0, 255, 0.75);\n       color: rgb(255, 255, 255, 0.99);\n       :hover {\n          color: rgb(0, 0, 0, 0.99);\n          box-shadow: none;\n          background-image: linear-gradient( to right, #ff7f00, #ff00ff );\n        }\n      `}\n      ${!props.secondary && `\n       border-color: rgb(255, 0, 255, 0.75);\n       color: rgb(255, 255, 255, 0.99);\n       :hover {\n          color: rgb(0, 0, 0, 0.99);\n          box-shadow: none;\n          //background-image: linear-gradient( to right, #ff7f00, #ff00ff );\n        }\n      `}\n    `,\n\n  },\n  box: {\n    border: {\n      width: '5px',\n      radius: '30px',\n    },\n    padding: {\n      vertical: '10px',\n      horizontal: '35px',\n    },\n    extend: props => `\n      font-size: 1.075rem;\n      font-weight: 500;\n      line-height: normal;\n\n     ${!props.primary && `\n       \n       //border-width: 2px;\n       //border-image: linear-gradient( to left,  #ff7f00,  #ff00ff ) 1 25%;\n       color: rgb(255, 255, 255, 0.99);\n       \n      `}\n      ${!props.secondary && `\n       \n       //border-width: none;\n       //border-image: linear-gradient( to bottom,  green,  rgba(0, 0, 0, 0.99) ) 1 100%;\n       color: rgb(255, 255, 255, 0.99);\n       \n      `}\n    `,\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  return (\n    <Grommet theme={theme} full>\n    <ResponsiveContext.Consumer>\n    {size => (\n      <Box primary fill>\n        <AppBar primary>\n          <Heading level='3' margin='none'>SFF</Heading>\n          <Button secondary\n            icon={<Menu />}\n            onClick={() => setShowSidebar(!showSidebar)}\n          />\n        </AppBar>\n        <Box primary direction='row' flex overflow={{ horizontal: 'hidden' }}>\n          <Box primary flex align='center' justify='center' background='brand'>\n            <Box secondary\n              flex\n              border={{ color: 'red' }}\n              align='center'\n              width='95%'\n              overflow={{ horizontal: 'hidden' }}\n              pad={{ horizontal: '5%' }}\n              background='brand'\n              >\n              <Box primary\n                border={{ color: 'brand' }}\n                align='left'\n                width={{ min: '200px', max: '750px' }}\n                background='brand'\n              >\n                <img src={logo} className=\"logo-image\" alt=\"Logo\" />\n                <Paragraph size='large' fill='true' margin={{ vertical: '15px' }}>\n                  At Studio Firefly, we never stop innovating. During the “Great Pause” we have pivoted our entire staff to join forces with our sister company, satoriteller. We don't love any of the virtual platforms that we've seen because they fail to produce a sense of community and a level of engagement that a live event creates. \n                </Paragraph>\n                <Paragraph size='large' fill='true' margin={{ vertical: '15px' }}>\n                  So, using our internal resources, we decided to build our own. While we aren't advocating that we can ever replicate or replace the experience of a live show, we think we can come closer to making the digital experience as compelling as the live experience. After all, at Studio Firefly, we are all about wonderment. \n                </Paragraph>\n                <Paragraph size='large' fill='true' margin={{ vertical: '15px' }}>\n                   More coming in the next few months, with a launch and full Digital Event Experience Demo coming this July, 2020. In the meantime, here's a sneak peek at what our designers, coders, producers, and technicians have been working on:\n                </Paragraph>\n                <Button secondary variant=\"outlined\" label='vevomo.com' alignSelf='start' />\n                \n              </Box> \n            </Box> \n            <Footer primary background=\"brand\" pad=\"medium\">\n              <Text>Copyright</Text>\n              <Anchor label=\"About\" />\n            </Footer>\n          </Box>\n\n          {(!showSidebar || size !== 'small') ? (\n            <Collapsible border={{ color: 'brand' }} direction=\"horizontal\" open={showSidebar}>\n            <Box \n              flex\n              width='medium'\n              background='brand'\n              border={{ color: 'brand' }}\n              elevation='small'\n              align='right'\n              justify='center'\n            >\n              <Text>sidebar</Text>\n              <Anchor label=\"About\" />\n            </Box>\n          </Collapsible>\n          ): (\n            <Layer>\n              <Box \n              background='brand'\n              border={{ color: 'brand' }}\n              tag='header'\n              justify='end'\n              align='left'\n              direction='row'\n            >\n              <Button\n                icon={<FormClose />}\n                onClick={() => setShowSidebar(false)}\n              />\n              </Box>\n              <Box \n                fill\n                background='brand'\n                border={{ color: 'brand' }}\n                align='left'\n                justify='left'\n              >\n                sidebar\n              </Box>\n            </Layer>\n          )}\n        </Box>\n      </Box>\n      )}\n    </ResponsiveContext.Consumer>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}